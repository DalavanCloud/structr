Structr (Pronunciation: \'str?k-ch?r\)

Structr is a Cloud-aware Enterprise Content and Application Framework.

Author: Axel Morgner


A. Introduction

Structr is a distributed content management environment. Structr lets people at different locations with different roles (authors, editors, designers and admins) interact and work together on different types of content. Physically, content objects and nodes, repositories, servers etc. may be distributed over the internet. Structr defines a logical structure, a model and rules for the aforementioned entities to interact.

This approach is designed for cloud-based content management, scaling from small web sites up to large enterprise intranet installations or even larger world-wide open communities.

Based on the Structr concept, software components will be developed and released by a team of experienced developers. Any Structr software will be easy to install and maintain, and will run on standard hosting hardware and software, as well as typical cloud services like Amazon EC2, VMware vSphere or Google App Engine.

B. About the Author

Axel Morgner (born October 12, 1975) is a German entrepreneur, software architect and developer. He holds a degree in physics and formerly worked for Oracle. In 2002, he co-founded inxire, a Germany-based ECM company. At inxire, he was CEO, but also worked on the early versions of inxire ECM, a Java-based enterprise content management software based on Oracle CM SDK. Morgner left inxire in 2010 to explore some new ideas and projects.

1. The Big Picture

1.1 Principles

Structr describes a model and techniques to manage and store distributed resources for internet websites, intranets or social networks, handled by authors, designers, editors or adminstrators, possibly scattered over the world. Distributed means that there's no need for a centralized logical or physical structure. All entities like content objects, nodes, users, applications or servers may be distributed over the internet (but you can start with a single repository as well). According to requirements in the fields of performance, speed, proximity, security or scalability, resources can be physically grouped and geographically placed in a way optimized for the given requirements.

Structr is fast, lightweight and scalable. Static content will be served directly by an Apache webserver, dynamic content by a JEE application  out of a very fast graph-oriented database.

Structr is open. Any source code and documentation will be released under a common Open Source Software license. Anyone can read, work, install and contribute at no costs. There will be APIs to the most important existing content management and groupware systems, social networks, search enginese etc.

Structr is community-driven. By defining an architecture, interfaces and standards, Structr leaves room for developers, users, site managers or designers to contribute and build an ecosystem for distributed content management.

Structr is easy to start with. To start with Structr, you don't have to known much about it. All you have to do is install a minimal system and start playing around. 

Structr is fault-tolerant. The system will not punish you for anything you eventually do wrong in the beginning. Structr will tell you about success or failure of your requested actions, and with the global undo function, you can unmake everything.

Structr makes administrators productive. A Structr repository is installed within minutes and comes with a pre-installed sample database. An admin console lets you easily Structr does the more complex tasks like backup, replication, migration etc.

Structr makes users productive. The key to that is simplicity and usability. By the way content is organized in Structr, all users will experience a dramatically increased productivity. While simple things like creating domains, sites, pages, edit text and handle images are done in seconds, Structr supports you on the more complex things with some intuitive tools. 

Structr is massively extensible. It has open APIs and a flexible data model which is flexible by means that the content structure can be freely modified at runtime. A plug-in architecture makes it easy for developers to create their own solutions with Structr.

Structr is secure. Any data is stored in an ACID database. If needed, any node can have multiple physical backup copies, and Structr automatically takes care of backup and recovery. Connections between servers and clients can be SSL-encrypted. Data storage on the server can be encrypted, too. There's a sophisticated access control system which restricts access to any content objects only for a defined set of users, groups or roles.

(Structr is commited to the Apache philosophy:
- collaborative software development
- commercial-friendly standard license
- consistently high quality software
- respectful, honest, technical-based interaction
- faithful implementation of standards
- security as a mandatory feature)

1.2 Concepts

In Structr, there are logical entities like domains, sites, text or application objects, which are connected by relationships, forming a logical structure. The logical structure is optimized for easy understanding and handling by humans, the physical structure is technically optimized for speed (latency and throughput), costs (commodity hard- and software, cloud services) and security (access control, encryption, data loss protection by purposeful redundancy or long-term archiving with WORM media).

Optimization is an important goal of Structr. The basic principle is: work with the nearest (=fastest, cheapest) entities. In case of information access, find the nearest content object. In case of a technical transformation, find the nearest transformation service.

Usability is key for user acceptance! And for admin acceptance, too! Any administration tasks (besides installation, start/stop instance) were done via Web UI.

One of the nice features of Structr is, that there is a undo function to rollback certain operations. So no annoying "Do you really want to ...?" anymore. Many operations can be done by one click which leads to extremely fast workflows.

For a distributed system, it is important to keep control over copies (cache, working copies, backups, clone, versions etc.). For that purpose, a unique id for each node has to be provided. Structr has such a unique id generator.

1.3 Security

Any cloud-based application has to fulfill heavy security requirements and should be aware of data integrity issues. The Structr security model takes care of data loss, spying (illegal access) and manipulation.

The basic security principals of Structr are the following:

- access is restrictable on any object level (domain, nodes, content objects)
- connections between servers can be secure (HTTPS)
- cache content (in-memory objects) can by encrypted (even with strong encryption)
- data can be stored encrypted on physical media, if necessary
- user authentication is based on state-of-the-art security (secure passwords, smart cards, finger print readers etc.)
- prevent data loss by redundancy (automatic replication of nodes)
- archived content is stored on write-once, read-multiple media (WORM)

2 Logical Structure

The logical structure is a rooted tree(*) with nodes. 

(*) As there are link relationships, which could possibly lead to cyclic relationships, the structure is merely a network.

2.1 Nodes

A node can be anything, from a simple data container, a user or a content object, up to a complex thing like an archive or a complex application. Nodes are connected by hierarchical path relationships and form the domain's logical structure, the domain tree (note: being a tree implies no cyclic paths).

Each node has properties and relationships. If the node is moved, properties and relationships are moved, too.

Nodes, relationships and properties are stored in a graph database. From the perspective of a console (see chapter "Consoles"), a node can be local or remote. A node is "local" to the user, if it is stored in the same repository as the user is connected to.

One of the fundamental principles of Structr is that nodes can change their type at run-time. A user can start with a node of a generic type (f.e. a folder), and then transform this node into a something more specific like a web folder, a user group or a document store.

When transforming a node from one type to another, there are three possible cases:
1. Less to more specific (extend):
  Some properties are inherited (e.g. name), some change (e.g. type) and some new properties are added, mandatory properties have to be set
2. More to less specific (generalize):
  Some properties are kept, some removed, some change.
3. Transform to something absolutely different:
  If it make sense at all, most of the properties change (e.g. Document -> User: only the name could be kept)
 
A node can contain other nodes.

Some basic node types are:

2.1.1 Domain

A domain defines the outer boundary of a set of content entities, sharing a common structure. The domain node is the root node of the domain tree. Within a domain, a common set of definitions, rules, users etc. is valid and active.

Typically, a domain is mapped to a company, a department within a company or a community of people with common content, users and apps, like i.e. structr.org.

2.1.2 Site

A site is a container with content and applications whithin a domain.

Typically, a site is adressed by a word preceding the domain string, e.g. www.structr.org.

2.1.3 Page

A page is an area which displays content.

Pages are linked to sites or other pages.

Properties:
- Doctype (Internet Media Type, f.k.a. Content-Type or MIME Type)

Relationships:
- Modules
- Includes (JS-, CSS-files)
- Templates


2.1.4 Modules

A module is a sub-component of a page. Modules are the building blocks of a page.

Modules can be content objects or applications.

Example modules are:
- An image gallery (displays one or more images as thumbnails)
- A teaser list (displays teaser text of one or more articles)
- A forum
- A content row or column

2.1.5 Content Objects

Content objects are modules with a simple functionality. Typically, content objects display content.

Simple content objects are f.e.:
- Text
- Images
- Video
- Menus

More complex types are:
- Article
- Article list
- Thumbnail gallery
- Applications

2.1.5.1 Text objects

2.1.5.1.1 Plain Text

A plain text object contains just plain text without formatting (content-type: text/plain).

2.1.5.1.2 Rich Text

A rich text object contains text with (simple) formatting (content-type: text/rtf).

2.1.5.1.3 HTML Source

An html source node contains HTML (content-type: text/html) and has a source editor.

2.1.5.1.3 HTML Text

An html source node contains HTML (content-type: text/html) and has a visual editor.

2.1.5.1.5 XML

An xml object contains XML (content-type: text/xml) and has a source editor.

2.1.5.2 Image

An image node stores a URL reference to an image. The image itself can be stored on the server (local path) or on a remote server.

Properties are:
- URL
- Content-type
- Dimensions (needed for optimal preparation of pages at rendering)
- Size


2.1.5.3 Menu

A menu displays links to other pages.  A menu object contains content (like a menu header and footer) and link objects.

2.1.6 Applications

Applications (or short: apps) are modules with a more complex built-in functionality. Apps are typically made for users to interact with each other on common content.

Technically, there's no difference between a content object and an application. The differentiation is only made to help users and developers to get an idea of the grade of complexity.

Example apps are:
- Forum
- Wiki
- Chat
- Survey
- ...




2.2 Consoles

Any GUI (graphical user interface) within the Structr concept is called a console. A console can be an iPad/iPhone/Android app, a pc desktop program, or a server-based web application. A console is context-free, means that it can be started without any dependency of other entities. To see content and work with a console, a user has to login to a domain on a server.

2.2.1 Admin Console

An Admin Console is the standard administration GUI of a Structr server. Through an admin console, an admin can execute actions like create, move, copy, backup, restore, clone entities in order to manage distributed entities.

Dashboard (overview of the state of a repository):
- Contents: Number of nodes (listed by node type, content-type etc.)
- Activity: Number of sessions, session history, login/logoff rate per min/hour/day, database commit rate etc.
- Users: Logged-in users (with user logoff/kill session button)

User management:
- add/enable/disable/ban/remove users
- add/remove groups

Functionality:
- add/enable/disable/remove components like
  -- extensions (or modules?)
  -- plug-ins (or extensions?)
- upgrades (self-installing upgrades?)
  


2.2.2 Live View

The live view displays the content for end-users, resulting from rendering content from content nodes into page templates.


2.3 Physical Structure

Repositories, servers, users ...

2.3.1 Repositories

A repository is a bunch of files which contain data in form of nodes and referenced content objects.

2.3.2 Servers

A Structr server is a process which manages a repository. When a user connects to a server, the user becomes "local" in the context of the server (and maybe "remote" from the perspective of other servers). A server has per default an admin console and a live view.

Remote nodes are nodes on a remote server. They can be imported (copy) or linked into a local repository.

2.3.3 

2.4 Events

The interaction between the described entities is done by events.

Event = Signal that something is happening
Action Request = Something a user or admin wants to be happening. An action results in one or more operations.
Action = Something that happens as consequence of an Action Request
Operation = Elementary operation on system level (e.g. copy, move, edit ...)

Events have one of the following types:
- message (information, warning, error, success, question, task, action request etc.)
- action (logical): f.e. create or edit content, change user password, move/copy/delete node etc.
- operation (physical): create node in repository 1 + delete node in repository 2

A global action catalog defines which action can be performed on which type of node. When a user requests an action, the system has to determine all objects which would be affected and whether the user is authorized to do this action. If yes, the action is perfomed by executing the physical operations. In any case, the user gets immediate and detailed feedback about success or failure of his/her requested action.

2.4.1 Actions

Basic actions are:
- login to a server
- create/delete/copy/move/link nodes (remember, a node can be a folder, a document, a page, a user, a group, a role etc.)
- edit node properties and content

Network actions are:
- connect with another server
- register user at remote repository/server (user mapping, access rights)
- copy node from/to another repository/server
- link node from/to another repository/server
- move node to another domain (copy + delete)

2.4.2 Operations

Elementary operations are:
- add/remove/modify relationships between nodes
- add/remove node from/to repository








3. Features/Ideas

- Real-time monitoring
    In the console a user can see the real-time latency (ping time) of a remote node.
    Technically, the latency values are provided by a heartbeat/watchdog facility.
- Geo-location APIs: determine the shortest path between user/reader and content. Decrease latency by using the nearest content copy.
- Microformats (see [microformats]).
- OpenID
- Inline Editing: Every content node can be edited inline
- integrated FTP Access (Apache MINA FtpServer)
- Integrate Application/HTTP server (starting structr by: java -jar structr.jar)
- use URL Rewriting for SEO-friendly URLs (urlrewritefilter)

4. Roadmap

Version 0.1 - inital version, starts with:
- proof-of-concept stadium
- local content only
- very simple access rights (public content, admin rights for console)
- very simple GUI



Z. Addendum

Z.0 Resources

Possible fonts:
urbanfonts.com:
Dimitri Swank
Electrofied
Napapiiri
Nordic
Stentiga
Zero Threes
Chica Mono
04b09
Aerial
BM plain A7
CitizenKern
Correspondent
Dustismo Roman
Familian Elder

Z.1 Software

Z.1.1 Databases

Possible databases are:

SQL:
  VoltDB (Open Source, in-memory, OLTP, ACID, but no ODBC/JDBC)
  PostgreSQL (Open Source, all-purpose)
  MySQL (Open Source, all-purpose)
  Oracle (all-purpose, but commercial and expensive)

NoSQL:
  Object DB: DB4O
  Graph DB: Neo4j
  K-V-store: Cassandra
  Tabular: Hadoop/HBase (Apache), BigTable (Google), Dynamo (Amazon)

Document database:
  CouchDB
  MongoDB
  Jackrabbit

Z.1.2 Plug-ins

Content Editors:
  CKEditor http://ckeditor.com/
  (WYMeditor http://www.wymeditor.org/)

Z.2 Hardware

Structr will run on commodity hardware and in the cloud.

Z.3 Miscallenous



Z.4 References
[microformats] http://microformats.org/
[nosql] http://nosql-database.org/
http://blog.technologyofcontent.com/2010/02/nosql-and-content-management/ 
[justincormack] http://blog.technologyofcontent.com/justincormack/
[lilycms] http://outerthought.org/site/products/lily.html